generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Birthday {
  id      String @id
  userId  String
  guildId String
  month   Int
  day     Int
}

model Cooldown {
  id        String   @id
  userId    String
  command   String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("(now() + '00:01:00'::interval)"))
  User      User     @relation(fields: [userId], references: [id])
}

model Guild {
  id              String   @id
  guildId         String   @unique
  userId          String
  changeable      Boolean  @default(false)
  adminRoleId     String?
  birthdayRoleId  String?
  birthdayMessage String?
  User            User     @relation(fields: [userId], references: [id])
  Wish            Wish[]
  Member          Member[] @relation("GuildToMember")
}

model Member {
  id             String   @id
  userId         String
  friends        String[]
  friendRequests String[]
  User           User     @relation(fields: [userId], references: [id])
  Guild          Guild[]  @relation("GuildToMember")
}

model SleepData {
  id        String    @id
  userId    String
  date      DateTime
  duration  Int
  SleepUser SleepUser @relation(fields: [userId], references: [userId])
}

model SleepUser {
  id        String      @id
  userId    String      @unique
  username  String
  avatar    String      @default("https://cdn.discordapp.com/attachments/1020419727731986613/1257156315466174526/default_clock.png?ex=6683618e&is=6682100e&hm=3149313c2ed7e676c5dffe39f2461c0d9f85f882564a208c404ff31905ee4b72&")
  updatedAt DateTime    @default(now())
  createdAt DateTime    @default(now())
  sessionId String
  SleepData SleepData[]
}

model User {
  id           String     @id
  userId       String     @unique
  accessToken  String     @unique
  refreshToken String     @unique
  Cooldown     Cooldown[]
  Guild        Guild[]
  Member       Member[]
}

model Wish {
  id           String @id
  userId       String
  guildId      String
  targetUserId String
  message      String
  year         Int    @default(2024)
  Guild        Guild  @relation(fields: [guildId], references: [id])
}

model ESession {
  id          String   @id @default(cuid())
  userId      String?  @unique
  sessionId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  ipAddresses String[]
  data        EData[]
  EUser       EUser?   @relation(fields: [userId], references: [userId])
}

model EUser {
  id           String         @id @default(cuid())
  userId       String         @unique
  username     String
  avatar       String?
  updatedAt    DateTime       @default(now())
  createdAt    DateTime       @default(now())
  password     String
  interactions EInteraction[]
  searches     ESearch[]
  session      ESession?
}

model EData {
  id              String            @id @default(cuid())
  sessionId       String
  dataType        EDataType
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  albumId         String?
  trackId         String?
  eAlbum          EAlbum?           @relation(fields: [albumId], references: [albumId])
  session         ESession          @relation(fields: [sessionId], references: [sessionId])
  eTrack          ETrack?           @relation(fields: [trackId], references: [trackId])
  interactions    EInteraction[]
  interactionData EInteractionData?
}

model EInteraction {
  id              String           @id @default(cuid())
  userId          String
  interactionType EInteractionType
  dataType        EDataType
  dataId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  albumId         String?
  trackId         String?
  eAlbum          EAlbum?          @relation(fields: [albumId], references: [albumId])
  eData           EData            @relation(fields: [dataId], references: [id], onDelete: Cascade)
  eTrack          ETrack?          @relation(fields: [trackId], references: [trackId])
  user            EUser            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model EInteractionData {
  id              String           @id @default(cuid())
  dataId          String           @unique
  interactionType EInteractionType
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  title           String?
  targetUserId    String?
  imageUrl        String?
  artistName      String?
  albumName       String?
  rating          Int?
  review          String?
  albumId         String?
  eData           EData            @relation(fields: [dataId], references: [id], onDelete: Cascade)
}

model ESearch {
  id          String   @id @default(cuid())
  userId      String?
  searchQuery String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        EUser?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model ETrack {
  id            String         @id @default(cuid())
  trackId       String         @unique
  title         String
  artistName    String
  albumName     String
  imageUrl      String?
  releaseDate   DateTime
  averageRating Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  albumId       String         @unique
  eData         EData[]
  interactions  EInteraction[]
  album         EAlbum         @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model EAlbum {
  id            String         @id @default(cuid())
  albumId       String         @unique
  title         String
  artistName    String
  imageUrl      String?
  averageRating Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  eData         EData[]
  interactions  EInteraction[]
  tracks        ETrack?
}

enum EDataType {
  ARTIST
  ALBUM
  TRACK
  USER
}

enum EInteractionType {
  RATED
  REVIEWED
  SAVED
  FAVORITED
  FOLLOWED
  UNFOLLOWED
}
