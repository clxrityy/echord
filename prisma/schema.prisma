generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model EUserAgent {
  id        String   @id @default(cuid())
  sessionId String
  browser   String
  os        String
  device    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  session   ESession @relation(fields: [sessionId], references: [sessionId])
}

model ESession {
  id          String       @id @default(cuid())
  userId      String       @unique
  sessionId   String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  ipAddresses String[]
  data        EData[]
  EUser       EUser        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userAgent   EUserAgent[]
}

model EUser {
  id           String         @id @default(cuid())
  userId       String         @unique
  username     String
  avatar       String?
  updatedAt    DateTime       @default(now())
  createdAt    DateTime       @default(now())
  password     String
  interactions EInteraction[]
  searches     ESearch[]
  session      ESession?
}

model EData {
  id              String            @id @default(cuid())
  sessionId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  albumId         String?
  trackId         String?
  eAlbum          EAlbum?           @relation(fields: [albumId], references: [albumId])
  session         ESession          @relation(fields: [sessionId], references: [sessionId])
  eTrack          ETrack?           @relation(fields: [trackId], references: [trackId])
  interactions    EInteraction[]
  interactionData EInteractionData?
}

model EInteraction {
  id              String           @id @default(cuid())
  userId          String
  interactionType EInteractionType
  dataId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  albumId         String?
  trackId         String?
  eAlbum          EAlbum?          @relation(fields: [albumId], references: [albumId])
  eData           EData            @relation(fields: [dataId], references: [id], onDelete: Cascade)
  eTrack          ETrack?          @relation(fields: [trackId], references: [trackId])
  user            EUser            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model EInteractionData {
  id              String           @id @default(cuid())
  dataId          String           @unique
  interactionType EInteractionType
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  title           String?
  targetUserId    String?
  imageUrl        String?
  artistName      String?
  albumName       String?
  rating          Int?
  review          String?
  albumId         String?
  trackId         String?
  eData           EData            @relation(fields: [dataId], references: [id], onDelete: Cascade)
}

model ESearch {
  id          String   @id @default(cuid())
  userId      String?
  searchQuery String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        EUser?   @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model ETrack {
  id            String         @id @default(cuid())
  trackId       String         @unique
  title         String
  artistName    String
  albumName     String
  imageUrl      String?
  releaseDate   DateTime?
  averageRating Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  albumId       String
  eData         EData[]
  interactions  EInteraction[]
  album         EAlbum         @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model EAlbum {
  id            String         @id @default(cuid())
  albumId       String         @unique
  title         String
  artistName    String
  imageUrl      String?
  averageRating Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  eData         EData[]
  interactions  EInteraction[]
  tracks        ETrack[]
}

enum EInteractionType {
  RATED
  REVIEWED
  SAVED
  FAVORITED
  FOLLOWED
  UNFOLLOWED
}
